def Gen_SP3_WHU(file_name,utc_time):
    YYYY,MON,DD,HH,MM,SS=utc_time.strftime("%Y %m %d %H %M %S ").split()
    print (YYYY,MON,DD,HH,MM,SS)
    year = []
    mon = []
    day = []
    hour = []
    minute=[]
    svid = []
    sv_num=[]
    pos_x = []
    pos_y = []
    pos_z = []
    pos_t = []
    total_calander=0
    f = open(file_name, 'r')
    while 1:
        line = f.readline()
        if line[0:4]=='+   ':
            sv_num.append(line[3:6])
        if line[0:3]=='EOF':
            break
        if line[0:1]=='*':
            total_calander=total_calander+1
            
    f.close()
    
    for i in range(0,int(sv_num[0]),1):
        svid.append([])
        pos_x.append([])
        pos_y.append([])
        pos_z.append([])
        pos_t.append([])
    for i in range(0,total_calander,1):
        year.append([])
        mon.append([])
        day.append([])
        hour.append([])
        minute.append([])
    
    sv_idx=0
    calender_idx=0
    
    f = open(file_name, 'r')

    while 1:
        line = f.readline()
        if line[0:1]=='*':
            year[calender_idx].append(line[3:7])
            mon[calender_idx].append(line[8:10])
            day[calender_idx].append(line[11:13])
            hour[calender_idx].append(line[14:16])
            minute[calender_idx].append(line[17:19])
            calender_idx=calender_idx+1
            sv_idx=0

    
        if line[0:1]=='P':
            svid[sv_idx].append(line[0:4])
            pos_x[sv_idx].append(line[5:18]) 
            pos_y[sv_idx].append(line[19:32])  
            pos_z[sv_idx].append(line[33:46])  
            pos_t[sv_idx].append(line[47:60]) 
            sv_idx=sv_idx+1
        if line[0:3]=='EOF':
            break
    f.close()

    deg=18
    time_deg=2
    estimate_time=6 # 6hr
    shift_min=30
    SP3_TimeError_threshold=1     #unit:1m
    SP3_DistanceError_threshold=1 #unit:1m
    
    sample_between_min= int(minute[1][0])-int(minute[0][0]) #15 min
    num_sample_in_hour=60//sample_between_min # 4 times
    sample_between_sec= 3600//num_sample_in_hour # 15min=900sec
    interval= estimate_time*num_sample_in_hour
    shift=shift_min//sample_between_min # shift sample   
    sp3_start_point= 4*interval  
    sp3_end_point= total_calander-interval; 

    for offset_estimate in range(int(sp3_start_point-shift),int(sp3_end_point-shift+1),int(interval)):
    
        start_sample=offset_estimate;
        num_sample_estimate=(num_sample_in_hour*estimate_time)+offset_estimate+shift*2;
        x_time=range(0,(num_sample_estimate-offset_estimate)*sample_between_sec,sample_between_sec);
    
        if offset_estimate==sp3_end_point-shift:
            start_sample=offset_estimate;
            num_sample_estimate=(num_sample_in_hour*estimate_time)+offset_estimate+shift;
            x_time=range(0,(num_sample_estimate-offset_estimate)*sample_between_sec,sample_between_sec);
        
        
        folder_new=file_name+'_'+'6hr'+'_'+str(int(year[start_sample][0]))+'_'+str(int(mon[start_sample][0]))+'_'+str(int(day[start_sample][0]))+'_'+str(int(hour[start_sample][0]))+'_'+str(int(minute[start_sample][0]))
        folder_new_binary=file_name[0:3]+str(int(year[start_sample][0]))+'_'+str(int(mon[start_sample][0]))+'_'+str(int(day[start_sample][0]))+'_'+str(int(hour[start_sample][0]))+'_'+str(int(minute[start_sample][0]))
        folder_new_binary_G=file_name[0:3]+'G'+str(int(year[start_sample][0]))+'_'+str(int(mon[start_sample][0]))+'_'+str(int(day[start_sample][0]))+'_'+str(int(hour[start_sample][0]))+'_'+str(int(minute[start_sample][0]))
        folder_new_binary_R=file_name[0:3]+'R'+str(int(year[start_sample][0]))+'_'+str(int(mon[start_sample][0]))+'_'+str(int(day[start_sample][0]))+'_'+str(int(hour[start_sample][0]))+'_'+str(int(minute[start_sample][0]))
        folder_new_binary_E=file_name[0:3]+'E'+str(int(year[start_sample][0]))+'_'+str(int(mon[start_sample][0]))+'_'+str(int(day[start_sample][0]))+'_'+str(int(hour[start_sample][0]))+'_'+str(int(minute[start_sample][0]))
        folder_new_binary_C=file_name[0:3]+'C'+str(int(year[start_sample][0]))+'_'+str(int(mon[start_sample][0]))+'_'+str(int(day[start_sample][0]))+'_'+str(int(hour[start_sample][0]))+'_'+str(int(minute[start_sample][0]))
        folder_new_binary_J=file_name[0:3]+'J'+str(int(year[start_sample][0]))+'_'+str(int(mon[start_sample][0]))+'_'+str(int(day[start_sample][0]))+'_'+str(int(hour[start_sample][0]))+'_'+str(int(minute[start_sample][0]))
        
        
        folder_error=file_name[0:3]+str(int(year[start_sample][0]))+'_'+str(int(mon[start_sample][0]))+'_'+str(int(day[start_sample][0]))+'_'+str(int(hour[start_sample][0]))+'_'+str(int(minute[start_sample][0]))+'_'+'error'
        
        f_new = open(folder_new, 'w')
        f_new_binary = open(folder_new_binary, 'wb')
        f_new_binary_G = open(folder_new_binary_G, 'wb')
        f_new_binary_R = open(folder_new_binary_R, 'wb')
        f_new_binary_E = open(folder_new_binary_E, 'wb')
        f_new_binary_C = open(folder_new_binary_C, 'wb')
        f_new_binary_J = open(folder_new_binary_J, 'wb')
        
        f_error = open(folder_error,'w')
        
        #utc to gpst
        doy=[0,31,59,90,120,151,181,212,243,273,304,334]
        yearsElasped=int(year[start_sample][0])-1980
        aa=0
        LeapDay=0
        while aa<=yearsElasped:
            if aa%100 == 20:
                if aa%400 == 20:
                    LeapDay=LeapDay+1
            elif aa%4 == 0:
                LeapDay=LeapDay+1
            aa=aa+1
        if(yearsElasped%100==20 )& (int(mon[start_sample][0])<=2):
            if(yearsElasped%100==20 )& (int(mon[start_sample][0])<=2):
                LeapDay=LeapDay-1
        elif (yearsElasped%4==0 )& (int(mon[start_sample][0])<=2):  
            LeapDay=LeapDay-1
        
        DaysElapsed= yearsElasped*365+doy[int(mon[start_sample][0])-1]+int(day[start_sample][0])-1+LeapDay-6
        WN=DaysElapsed//7
        TOW=(DaysElapsed%7)*86400+int(hour[start_sample][0])*3600+int(minute[start_sample][0])*60
        weekno,tow=UTC2GPST(int(year[start_sample][0]),int(mon[start_sample][0]),int(day[start_sample][0]),int(hour[start_sample][0]),int(minute[start_sample][0]))
        
        f_new_binary.write(struct.pack('1i1i1B',WN,TOW,int(sv_num[0])))
        f_new_binary_G.write(struct.pack('1i1i1B',WN,TOW,int(sv_num[0])))
        f_new_binary_R.write(struct.pack('1i1i1B',WN,TOW,int(sv_num[0])))
        f_new_binary_E.write(struct.pack('1i1i1B',WN,TOW,int(sv_num[0])))
        f_new_binary_C.write(struct.pack('1i1i1B',WN,TOW,int(sv_num[0])))
        f_new_binary_J.write(struct.pack('1i1i1B',WN,TOW,int(sv_num[0])))

        SV_total_num=0;
        SV_total_num_G=0;
        SV_total_num_E=0;
        SV_total_num_R=0;
        SV_total_num_C=0;
        SV_total_num_J=0;

        for sv_i in range(0,int(sv_num[0]),1):
            #check all value is ok
            ax=[float(pos_x[sv_i][start_sample+j])- 999999.999999 for j in range(len(pos_x[sv_i][start_sample:num_sample_estimate]))]
            ay=[float(pos_y[sv_i][start_sample+j])- 999999.999999 for j in range(len(pos_y[sv_i][start_sample:num_sample_estimate]))]
            az=[float(pos_z[sv_i][start_sample+j])- 999999.999999 for j in range(len(pos_z[sv_i][start_sample:num_sample_estimate]))]
            at=[float(pos_t[sv_i][start_sample+j])- 999999.999999 for j in range(len(pos_t[sv_i][start_sample:num_sample_estimate]))]
            
            px=np.polyfit(x_time, list(map(float,pos_x[sv_i][start_sample:num_sample_estimate])),deg )
            py=np.polyfit(x_time, list(map(float,pos_y[sv_i][start_sample:num_sample_estimate])),deg )
            pz=np.polyfit(x_time, list(map(float,pos_z[sv_i][start_sample:num_sample_estimate])),deg )
            pt=np.polyfit(x_time, list(map(float,pos_t[sv_i][start_sample:num_sample_estimate])),time_deg )
            
            if max(abs(np.array(ax)))<=10e-5 or max(abs(np.array(ay)))<=10e-5 or max(abs(np.array(az)))<=10e-5 or max(abs(np.array(at)))<=10e-5:
                continue
            ans_fitx=np.polyval(px,x_time)
            ans_fity=np.polyval(py,x_time)
            ans_fitz=np.polyval(pz,x_time)
            ans_fitt=np.polyval(pt,x_time)
            
            x_diff=[float(pos_x[sv_i][start_sample+j])- ans_fitx[j] for j in range(len(pos_x[sv_i][start_sample:num_sample_estimate]))]
            y_diff=[float(pos_y[sv_i][start_sample+j])- ans_fity[j] for j in range(len(pos_y[sv_i][start_sample:num_sample_estimate]))]
            z_diff=[float(pos_z[sv_i][start_sample+j])- ans_fitz[j] for j in range(len(pos_z[sv_i][start_sample:num_sample_estimate]))]
            t_diff=[float(pos_t[sv_i][start_sample+j])- ans_fitt[j] for j in range(len(pos_t[sv_i][start_sample:num_sample_estimate]))]
            
            #x_diff=list(map(float,pos_x[sv_i][start_sample:num_sample_estimate]))-ans_fitx
            #y_diff=list(map(float,pos_y[sv_i][start_sample:num_sample_estimate]))-ans_fity
            #z_diff=list(map(float,pos_z[sv_i][start_sample:num_sample_estimate]))-ans_fitz
            #t_diff=list(map(float,pos_t[sv_i][start_sample:num_sample_estimate]))-ans_fitt
            
            x_diff=np.array(x_diff)*np.array(x_diff)
            y_diff=np.array(y_diff)*np.array(y_diff)
            z_diff=np.array(z_diff)*np.array(z_diff)
            
            error_distance=np.sqrt(x_diff+y_diff+z_diff)*1000 # unit: m
            error_time=np.array(t_diff)*3*10**8*10**-6  # unit: m


            #TODO BIG ERROR
            SV_total_num=SV_total_num+1
            #SV POLYNOMIAL
            f_new.write( svid[sv_i][0]+' ')
            for i in range(0,len(px)):
                f_new.write(str(px[i])+' ')
            f_new.write('\n')
            for i in range(0,len(py)):
                f_new.write(str(py[i])+' ')
            f_new.write('\n')
            for i in range(0,len(pz)):
                f_new.write(str(pz[i])+' ')
            f_new.write('\n')
            for i in range(0,len(pt)):
                f_new.write(str(pt[i])+' ')
            f_new.write('\n')            
            #SV ERROR
            f_error.write( svid[sv_i][0]+' ')
            f_error.write( str(max(error_distance))+' ') 
            f_error.write( str(max(error_time)) ) 
            f_error.write('\n')  
            
            
            #SV binary
            f_new_binary.write(struct.pack("1c1b", bytes(svid[sv_i][0][1],"utf-8"), int(svid[sv_i][0][2:4])))  
            f_new_binary.write((px))   
            f_new_binary.write((py))
            f_new_binary.write((pz))
            f_new_binary.write((pt))    
            
            if(svid[sv_i][0][1]=='G'):
                Write_SP3BinaryFormat(f_new_binary_G,bytes(svid[sv_i][0][1],"utf-8"),int(svid[sv_i][0][2:4]),px,py,pz,pt)
                '''
                f_new_binary_G.write(struct.pack("1c1b", bytes(svid[sv_i][0][1],"utf-8"), int(svid[sv_i][0][2:4])))  
                f_new_binary_G.write((px))   
                f_new_binary_G.write((py))
                f_new_binary_G.write((pz))
                f_new_binary_G.write((pt)) 
                '''
                SV_total_num_G=SV_total_num_G+1
            if(svid[sv_i][0][1]=='R'):
                f_new_binary_R.write(struct.pack("1c1b", bytes(svid[sv_i][0][1],"utf-8"), int(svid[sv_i][0][2:4])))  
                f_new_binary_R.write((px))   
                f_new_binary_R.write((py))
                f_new_binary_R.write((pz))
                f_new_binary_R.write((pt)) 
                SV_total_num_R=SV_total_num_R+1
            if(svid[sv_i][0][1]=='E'):
                f_new_binary_E.write(struct.pack("1c1b", bytes(svid[sv_i][0][1],"utf-8"), int(svid[sv_i][0][2:4])))  
                f_new_binary_E.write((px))   
                f_new_binary_E.write((py))
                f_new_binary_E.write((pz))
                f_new_binary_E.write((pt)) 
                SV_total_num_E=SV_total_num_E+1
            if(svid[sv_i][0][1]=='C'):
                f_new_binary_C.write(struct.pack("1c1b", bytes(svid[sv_i][0][1],"utf-8"), int(svid[sv_i][0][2:4])))  
                f_new_binary_C.write((px))   
                f_new_binary_C.write((py))
                f_new_binary_C.write((pz))
                f_new_binary_C.write((pt)) 
                SV_total_num_C=SV_total_num_C+1
            if(svid[sv_i][0][1]=='J'):
                f_new_binary_J.write(struct.pack("1c1b", bytes(svid[sv_i][0][1],"utf-8"), int(svid[sv_i][0][2:4])))  
                f_new_binary_J.write((px))   
                f_new_binary_J.write((py))
                f_new_binary_J.write((pz))
                f_new_binary_J.write((pt)) 
                SV_total_num_J=SV_total_num_J+1                
                
                
        f_new_binary.seek(0)
        f_new_binary.write(struct.pack('1i1i1B',WN,TOW,SV_total_num))
        f_new_binary_G.seek(0)
        f_new_binary_G.write(struct.pack('1i1i1B',WN,TOW,SV_total_num_G))
        f_new_binary_R.seek(0)
        f_new_binary_R.write(struct.pack('1i1i1B',WN,TOW,SV_total_num_R))
        f_new_binary_E.seek(0)
        f_new_binary_E.write(struct.pack('1i1i1B',WN,TOW,SV_total_num_E))
        f_new_binary_C.seek(0)
        f_new_binary_C.write(struct.pack('1i1i1B',WN,TOW,SV_total_num_C))
        f_new_binary_J.seek(0)
        f_new_binary_J.write(struct.pack('1i1i1B',WN,TOW,SV_total_num_J))
        
        f_error.close()
        f_new_binary.close()
        f_new_binary_G.close()
        f_new_binary_R.close()
        f_new_binary_E.close()
        f_new_binary_C.close()
        f_new_binary_J.close()